//=========================================================
// 747-400 device file
//=========================================================
// Version: 0.1
// Date: 	29-12-2003
// Notes:	This version was changed because of the rewiring of the MCP. I also
//		added the display definition because this hardware will be added
//		very soon.  
// Version: 0
// Date: 	28-9-2003
// Notes:	This initial version was taken from tickDevice.hpl
//=========================================================

//=========================================================
// Start of Connector FirstExpMod
//=========================================================
// Notes:	This connector definition was added in the beginning by default. Maybe we
//		can live without it ?
//=========================================================
connector(FirstExpMod)
{
	analog(0);
	analog(1);
	analog(2);
	analog(3);
	analog(4);
	analog(5);
	analog(6);
	analog(7);
	analog(8);
	analog(9);
	analog(10);
	analog(11);
	analog(12);
	analog(13);
	analog(14);
	analog(15);

	modrow(0,0);	// A db15 connector
	modrow(0,1);	// B db15 connector
	modrow(0,2);	// RUDDER db15 connector
	modrow(0,3);	// not used
	modrow(0,4);	// FLCS
	modrow(0,5);	// FLCS
	modrow(0,6);	// FLCS
};
//=========================================================
// End of Connector FirstExpMod
//=========================================================


//=========================================================
// Start of Connector MCPconn
//=========================================================
// Notes:	This connector definition defines the modules
//		that are used by the MCP.
//=========================================================
connector(MCPconn)
{
	modrow(7,0);	// Rotary module (module 7) Scan Row 0
	modrow(7,1);	// Rotary module (module 7) Scan Row 1

	modrow(1,0);	// 64 button module Scan Row 0
	modrow(1,1);	// 64 button module Scan Row 1
	modrow(1,4);	// 64 button module Scan Row 4 
	modrow(1,5);	// 64 button module Scan Row 5
	
};
//=========================================================
// End of Connector MCPconn
//=========================================================


//=========================================================
// Start of Connector CP_EFISconn
//=========================================================
// Notes:	This connector definition defines the modules
//		that are used by the EFIS used by the Captain (CP).
//=========================================================
connector(CP_EFISconn)
{
	modrow(7,0);	// Rotary module (module 7) Scan Row 0
	modrow(1,7);	// 64 button module Scan Row 7 
	modrow(1,6);	// 64 button module Scan Row 6 
	modrow(1,5);	// 64 button module Scan Row 5 
};
//=========================================================
// End of Connector CP_EFISconn
//=========================================================

//=========================================================
// Start of Connector EDSPconn
//=========================================================
// Notes:	This connector definition defines the modules
//		that are used by the EDSP.
//=========================================================
connector(EDSPconn)
{
	modrow(1,1);	// 64 button module Scan Row 1
	modrow(1,2);	// 64 button module Scan Row 2
	
};
//=========================================================
// End of Connector EDSPconn
//=========================================================


//=========================================================
// Start of Device MCP
//=========================================================
// Notes:	This device definition defines the buttons, rotarys, leds
//		and displays that are used by the MCP.
//=========================================================
device(MCP)
{

	connector(MCPconn);

	button(2,0,b_FO_FD);		// Button 32
	button(2,2,b_AP_Dis_rgt);	// Button 33
	button(2,3,b_AP2);		// Button 34
	button(2,5,b_AP1);		// Button 35
	button(2,6,b_LOC);		// Button 36
	button(3,0,b_APP);		// Button 37
	button(3,2,b_ALT);		// Button 38
	button(3,3,b_AP_Dis_lft);	// Button 39
	button(3,5,b_ALT_ROT);		// Button 40
	button(3,6,b_AP3);		// Button 41
	button(3,7,b_VS);			// Button 42
	button(4,0,b_LNAV);		// Button 43
	button(4,2,b_SPD_MACH);		// Button 44
	button(4,3,b_HDG_ROT);		// Button 45
	button(4,6,b_CP_FD);		// Button 46
	button(4,7,b_VNAV);		// Button 47
	button(5,0,b_ATHR);		// Button 48
	button(5,2,b_SPD_ROT);		// Button 49		
	button(5,3,b_HDG);		// Button 50
	button(5,5,b_SPD);		// Button 51
	button(5,6,b_THR);		// Button 52
	button(5,7,b_FLCH);		// Button 53

	// Rotary Module 7, Scan Row 2
	button(0,4,r_cnt_SPD);		// Speed count,Button 54? 
	button(0,5,r_dir_SPD);		// Speed direction,Button 55?

	// Rotary Module 7, Scan Row 3
	button(0,6,r_cnt_HDG);		// Heading setting count,Button 56?
	button(0,7,r_dir_HDG);		// Heading setting direction,Button 57?	
	
	
	// Rotary Module 7, Scan Row 4
	button(1,0,r_cnt_VS);		// Vertical Speed setting count,Button 58? 
	button(1,1,r_dir_VS);		// Vertical Speed setting direction,Button 59?
	
	// Rotary Module 7, Scan Row 5
	button(1,2,r_cnt_ALT);		// Altitude setting count,Button 60?
	button(1,3,r_dir_ALT);		// Altitude setting direction,Button 61?

	output(Rotary01,7,1)
	{
		R0Type = 0b00000011;
		R1Type = 0b00001100;
	};
	
	output(Rotary23,7,0)
	{
		R2Type = 0b00110000;
		R3Type = 0b11000000;
	};
		
	output(leds0,0,0)
	{
		led_FLCH = 0x01;
		led_THR = 0x02;
		led_HDG = 0x04;
		led_SPD = 0x08;
		led_LNAV = 0x10;
		led_VNAV = 0x20;								
		led_ALT = 0x40;
		led_APP = 0x80;		
	};
	output(leds1,0,1)
	{
		led_VS = 0x01;
		led_AP1 = 0x02;
		led_LOC = 0x04;
		led_AP3 = 0x08;
		led_AP2 = 0x10;		
	};
};
//=========================================================
// End of Device MCP
//=========================================================


//=========================================================
// Start of Device CP_EFIS
//=========================================================
// Notes:	This device definition defines the buttons, rotarys, leds
//		and displays that are used by the Captains EFIS.
//=========================================================
device(CP_EFIS)
{

	connector(CP_EFISconn);
	
	button(1,0,b_POS); // Button 62?
	button(1,1,b_DATA);// Button 63?
	button(1,2,b_ARPT);// Button 64?
	button(1,3,b_WPT);// Button 65?
	button(1,4,b_STA);// Button 66?
	button(1,5,b_WXR);// Button 67?
	button(1,6,b_ADF_1);// Button 68?
	button(1,7,b_VOR_1);// Button 69?
	button(2,0,b_DRS_10);	// Button 70?
	button(2,1,b_DMS_PLN);// Button 71?
	button(2,2,b_DMS_MAP);// Button 72?
	button(2,3,b_DMS_VOR);// Button 73?
	button(2,4,b_DMS_APP);			// Button 74?
	button(2,5,b_metric_ALT);// Button 75?
	button(2,6,b_ADF_2);	// Button 76?
	button(2,7,b_VOR_2);// Button 77?
	button(3,0,b_BARO_ROT);// Button 78?
	button(3,1,b_DHMDA_ROT);// Button 79?
	button(3,2,b_DRS_640);// Button 80?
	button(3,3,b_DRS_320);// Button 81?
	button(3,4,b_DRS_160);			// Button 82?				
	button(3,5,b_DRS_80);// Button 83?
	button(3,6,b_DRS_40);	// Button 84?
	button(3,7,b_DRS_20);// Button 85?
	// Rotary Module 7, Scan Row 0
	button(0,0,r_cnt_Dhmda);		// DHMDA pilot count, Button 86?
	button(0,1,r_dir_Dhmda);		// DHMDA pilot turn direction, Button 87?	
	// Rotary Module 7, Scan Row 1
	
	button(0,2,r_cnt_Baro);		// Baro pilot count, Button 88?
	button(0,3,r_dir_Baro);		// Baro pilot turn direction, Button 89?
	
};
//=========================================================
// End of Device CP_EFIS
//=========================================================

//=========================================================
// Start of Device EDSP
//=========================================================
// Notes:	This device definition defines the buttons
// 		that are used by the EDSP.
//=========================================================
device(EDSP)
{

	connector(EDSPconn);
	button(0,3,b_ENG);
	button(0,4,b_ELEC);
	button(0,5,b_FUEL);
	button(0,6,b_STAT);
	button(0,7,b_ECS);
	button(1,0,b_HYD);
	button(1,1,b_CANC);
	button(1,2,b_DRS);
	button(1,3,b_GEAR);
	button(1,4,b_RCL);
};
//=========================================================
// End of Device EDSP
//=========================================================

device (CP_EFIS_Output)
{
	output(Rotary,7,0)
	{
		R0Type = 0b00000011;
		R1Type = 0b00001100;
	};
};

device(Display)
{
//	display(name, module, start_digit, format)
  	display(AP_VS_VALUES,   2,  0,"00000", true);
}; 	
