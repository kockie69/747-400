// *** do not remove *** updtepl ver 0.1.1.45

//--------------------------------
// First start including some basic stuff
//--------------------------------
#include <epicdefs.hpl>

//--------------------------------
// Next include device definitions
//--------------------------------
#include "747-400-devices.hpl"	

//====================================================================
// Definition of Rotary Types and Rotary turning constants
//====================================================================
#define TYPE0 0b00000000	// ALPS
#define TYPE1 0b01010101	// rotary two phase type1
#define TYPE2 0b10101010	// rotary two phase type2
#define TYPE3 0b11111111	// Grayhil


#define HFSens_FAST_DELTA 8
#define HFSens_SLOW_DELTA 1
#define FreqSelector_FAST_DELTA 8
#define FreqSelector_SLOW_DELTA 1
#define BrtUpr_DELTA 8
#define BrtLwr_DELTA 8

#define HFSens_TIMER 5
#define FreqSelector_TIMER 5

//--------------------------------
// Define variables and flags
//--------------------------------

flag InnerFreqSelectorLeft=false;	// In real life the Frequency selector has an inner and outer knob. In my sim this
flag InnerFreqSelectorCenter=false;	// is simulated by a push button. When pushed these variables will
flag InnerFreqSelectorRight=false;	// be true.
flag f_FreqSelectorTiming = false; // 
flag f_HFSensTiming = false;
flag BrtUprInitialized=false;
flag BrtLwrInitialized=false;

byte byt_Tick=0;
byte byt_FreqSelectorTime=0;
byte byt_HFSensTime=0;

word frac;
word preFrac;
word AltnFlapsArmWord;
word AltnGearNoseBodyWord;
word AltnGearWingsWord;
word GPWSGSWord;
word GPWSFlapWord;
word GPWSGearWord;
word wrd_HFSens;
word wrd_FreqSelector;

rvar(wrd_BrtUpr,0,4713,1500,true);
rvar(wrd_BrtLwr,0,4713,1500,true);

//--------------------------------
// Including Qproc Config and functions called by Qprocs
//--------------------------------
#include "747-400-qproc.inc"

//--------------------------------
// Including Pigeon Holes functions
//--------------------------------
#include "747-400-ph.inc"

//-------------------------------------------------------------------------
// Main Timing Loop
//-------------------------------------------------------------------------
void CheckSpeedTimers (void)
{
	if (f_FreqSelectorTiming)							// is FreqSelector knob turning
	{	
		byt_FreqSelectorTime--;						// decrement byt_FreqSelectorTime by 1
		if (!byt_FreqSelectorTime)						// if byt_FreqSelectorTime = 0 
		{
			f_FreqSelectorTiming = false;	
			// Send FreqSelectorWord to PSX
		}
	}
	
	if (f_HFSensTiming)							// is HFSens knob turning
	{	
		byt_HFSensTime--;						// decrement byt_HFSensTime by 1
		if (!byt_HFSensTime)						// if byt_HFSensTime = 0 
		{
			f_HFSensTiming = false;	
			// Send HFSensWord to PSX
		}
	}	
}



void MainLoop (void)
{
  call(CheckSpeedTimers);		// check to see if switch timers have expired and if so , handle them
  byt_Tick++;
  if (byt_Tick > 49)
  {
    byt_Tick = 0;
  }
  delay(1);					// wait 20msec
  jump(MainLoop);				// restart the main Loop
}

//-------------------------------------------------------------------------
//INIT must be spelled in caps. This will be executed when Project|Load completes.
//-------------------------------------------------------------------------

void INIT (void)
{
  // First init rotaries
  senddata(7,0,TYPE2);
  senddata(7,1,TYPE2);

  setqlogon(0x11);	// bit 0 allows tracing of EPL code, bit 4 allows user control of TP2 using exec(138); to turn on and exec(139); to turn off
  exec(139);		// turn off TP2
  jump(MainLoop);				
  // once finished, jump to the main timing loop
}

//************************************
// All the rotary definitions 

void handle_BrtUpr_rot(void)
{
	if (EHRFMC.r_dir_BrtUpr)
	{
		wrd_BrtUpr = wrd_BrtUpr - BrtUpr_DELTA;
	}
	else
	{
		wrd_BrtUpr = wrd_BrtUpr + BrtUpr_DELTA;

	}
	nqw(0x0018,wrd_BrtUpr,20);
}

void EHRFMC.r_cnt_BrtUpr.On(void){
jump(handle_BrtUpr_rot);	
}

void EHRFMC.r_cnt_BrtUpr.Off(void){
jump(handle_BrtUpr_rot);	
}

void handle_BrtLwr_rot(void)
{
	if (EHRFMC.r_dir_BrtLwr)
	{
		wrd_BrtLwr = wrd_BrtLwr - BrtLwr_DELTA;

	}
	else
	{
		wrd_BrtLwr = wrd_BrtLwr + BrtLwr_DELTA;
	}
	nqw(0x0019,wrd_BrtLwr,20);
}

void EHRFMC.r_cnt_BrtLwr.On(void){
jump(handle_BrtLwr_rot);	
}

void EHRFMC.r_cnt_BrtLwr.Off(void){
jump(handle_BrtLwr_rot);	
}

void handle_HFSens_rot(void)
{
	if (RTPLeft.r_dir_HFSens)
	{
		if (f_HFSensTiming)
		{
			wrd_HFSens -= HFSens_FAST_DELTA;
		}
		else
		{
			wrd_HFSens -= HFSens_SLOW_DELTA;
		}
	}
	else
	{
		if (f_HFSensTiming)
		{
			wrd_HFSens += HFSens_FAST_DELTA;
		}
		else
		{
			wrd_HFSens += HFSens_SLOW_DELTA;
		}
	}
	byt_HFSensTime = HFSens_TIMER;
	f_HFSensTiming = true;
}

void RTPLeft.r_cnt_HFSens.On(void){
jump(handle_HFSens_rot);	
}

void RTPLeft.r_cnt_HFSens.Off(void){
jump(handle_HFSens_rot);	
}

void handle_FreqSelector_rot(void)
// 0,0,1 =1 Turn small frequency knob clockwise slow 
// 0,0,8 =8 Turn small frequency knob clockwise fast
// 0,0,-1 =-1Turn small frequency knob anti-clockwise slow
// 0,0,-8 =-8 Turn small frequency knob anti-clockwise fast
// 0,1,0 =2 Turn high frequency knob clockwise slow
// 0,8,0 =16 Turn high frequency knob clockwise fast
// 0,-1,0 =-2 Turn high frequency knob anti-clockwise slow
// 0,-8,0 =-16 Turn high frequency knob anti-clockwise fast
{
	if (InnerFreqSelectorLeft)
	// The small frequency knob
	{
		if (RTPLeft.r_dir_FreqSelector)
		// Turn small frequency knob anti-clockwise
		{
			if (f_FreqSelectorTiming)
			{
				// Turn small frequency knob anti-clockwise fast
				nqw(0x000d,0x10f0,20);
			}
			else
			{
				// Turn small frequency knob anti-clockwise slow
				nqw(0x000d,0x00f0,20);
			}
		}
		else
		{
		// Turn small frequency knob clockwise
			if (f_FreqSelectorTiming)
			{
				// Turn low frequency knob clockwise fast
				nqw(0x000d,0x1010,20);
			}
			else
			{
				// Turn small frequency knob clockwise slow
				nqw(0x000d,0x0010,20);
			}
		}
	}
	else
	// The high frequency knob
	{
		if (RTPLeft.r_dir_FreqSelector)
		// Turn high frequency knob anti-clockwise
		{
			if (f_FreqSelectorTiming)
			{
				// Turn high frequency knob anti-clockwise fast
				nqw(0x000d,0x100f,20);
			}
			else
			{
				// Turn high frequency knob anti-clockwise slow
				nqw(0x000d,0x000f,20);
			}
		}
		else
		// Turn high frequency knob clockwise
		{
			if (f_FreqSelectorTiming)
			{
				// Turn high frequency knob clockwise fast
				nqw(0x000d,0x1001,20);
			}
			else
			{
				// Turn high frequency knob clockwise slow
				nqw(0x000d,0x0001,20);
			}
		}
	}	
	byt_FreqSelectorTime = FreqSelector_TIMER;
	f_FreqSelectorTiming = true;
}

void RTPLeft.r_cnt_FreqSelector.On(void){
jump(handle_FreqSelector_rot);	
}

void RTPLeft.r_cnt_FreqSelector.Off(void){
jump(handle_FreqSelector_rot);	
}


//************************************
// Autobrakes buttons

void AutoBrakes.RTO.On (void) { nqw(0x0000,0x0000,20);}	// AutoBrakes RTO
void AutoBrakes.OFF.On (void) { nqw(0x0000,0x0001,20);}	// AutoBrakes OFF
void AutoBrakes.DISARM.On (void) { nqw(0x0000,0x0002,20);}	// AutoBrakes DISARM	
void AutoBrakes._1.On (void) { nqw(0x0000,0x0003,20);}	// AutoBrakes 1	
void AutoBrakes._2.On (void) { nqw(0x0000,0x0004,20);}	// AutoBrakes 2
void AutoBrakes._3.On (void) { nqw(0x0000,0x0005,20);}	// AutoBrakes 3
void AutoBrakes._4.On (void) { nqw(0x0000,0x0006,20);}	// AutoBrakes 4
void AutoBrakes.MAXAUTO.On (void) { nqw(0x0000,0x0007,20);}	// AutoBrakes MAXAUTO

//************************************
// ThrottleQuadrant buttons

void ThrottleQuadrant.ParkingBrakePull.On (void) { nqw(0x0004,0x0001,20);}	// Parking Brake Pull On
void ThrottleQuadrant.ParkingBrakePull.Off (void) { nqw(0x0004,0x0000,20);}	// Parking Brake Pull Off

//************************************
// Gear buttons

void Gear.AltnFlapsRet.On (void) { nqw(0x0005,0x0000,20);}
void Gear.AltnFlapsOff.On (void) { nqw(0x0005,0x0001,20);}
void Gear.AltnFlapsExt.On (void) { nqw(0x0005,0x0002,20);}
void Gear.AltnFlapsArm.On (void) { AltnFlapsArmWord = AltnFlapsArmWord ^ 0x0001;nqw(0x000A,AltnFlapsArmWord ,20);}
void Gear.AltnFlapsArm.Off (void) { AltnFlapsArmWord = AltnFlapsArmWord ^ 0x0001;nqw(0x000A,AltnFlapsArmWord ,20);}
void Gear.GearDown.On (void) { nqw(0x0006,0x0003,20);}
void Gear.GearDown.Off (void) { nqw(0x0006,0x0002,20);}
// void Gear.GearOff.On (void) { nqw(0x0006,0x0002,20);}
void Gear.GearUp.On (void) { nqw(0x0006,0x0001,20);}
void Gear.GearUp.Off (void) { nqw(0x0006,0x0002,20);}
void Gear.GearLockOvrd.On (void) { nqw(0x0007,0x0001,20);}
void Gear.GearLockOvrd.Off (void) { nqw(0x0007,0x0000,20);}
void Gear.AltnGearNoseBody.On (void) { AltnGearNoseBodyWord = AltnGearNoseBodyWord ^ 0x0001;nqw(0x0008,AltnGearNoseBodyWord,20);}
void Gear.AltnGearNoseBody.Off (void) { AltnGearNoseBodyWord = AltnGearNoseBodyWord ^ 0x0001;nqw(0x0008,AltnGearNoseBodyWord,20);}
void Gear.AltnGearWings.On (void) { AltnGearWingsWord = AltnGearWingsWord ^ 0x0001;nqw(0x0009,AltnGearWingsWord,20);}
void Gear.AltnGearWings.Off (void) { AltnGearWingsWord = AltnGearWingsWord ^ 0x0001;nqw(0x0009,AltnGearWingsWord,20);}

//************************************
// GPWS buttons
void GPWS.GS.On (void) { GPWSGSWord = GPWSGSWord ^ 0x0001;nqw(0x0011,GPWSGSWord,20);}
void GPWS.GS.Off (void) { GPWSGSWord = GPWSGSWord ^ 0x0001;nqw(0x0011,GPWSGSWord,20);}
void GPWS.Flap.On (void) { GPWSFlapWord = GPWSFlapWord ^ 0x0001;nqw(0x0012,GPWSFlapWord,20);}
void GPWS.Flap.Off (void) { GPWSFlapWord = GPWSFlapWord ^ 0x0001;nqw(0x0012,GPWSFlapWord,20);}
void GPWS.Gear.On (void) { GPWSGearWord = GPWSGearWord ^ 0x0001;nqw(0x0013,GPWSGearWord,20);}
void GPWS.Gear.Off (void) { GPWSGearWord = GPWSGearWord ^ 0x0001;nqw(0x0013,GPWSGearWord,20);}




//************************************
// RTPLeft buttons
void RTPLeft.FreqSelector.On (void) { 
	if (InnerFreqSelectorLeft) { 
		InnerFreqSelectorLeft=false;
	}
	else {
		InnerFreqSelectorLeft=true;
	}
}

void RTPLeft.PanelOffSwitch.On (void) {nqw(0x000b,0x0000,20);}
void RTPLeft.PanelOffSwitch.Off (void) {nqw(0x000b,0xffff,20);}
void RTPLeft.FreqTransferSwitch.On (void) {nqw(0x000b,0x0007,20);}
void RTPLeft.VHFL.On (void) {nqw(0x000b,0x0001,20);}
void RTPLeft.VHFC.On (void) {nqw(0x000b,0x0002,20);}
void RTPLeft.VHFR.On (void) {nqw(0x000b,0x0003,20);}
void RTPLeft.AM.On (void) {nqw(0x000b,0x0005,20);}
void RTPLeft.HFL.On (void) {nqw(0x000b,0x0004,20);}
void RTPLeft.HFR.On (void) {nqw(0x000b,0x0006,20);}

//************************************
// RTPCenter buttons
void RTPCenter.FreqSelector.On (void) { 
	if (InnerFreqSelectorCenter) { 
		InnerFreqSelectorCenter=false;
	}
	else {
		InnerFreqSelectorCenter=true;
	}
}

void RTPCenter.PanelOffSwitch.On (void) {nqw(0x000c,0x0000,20);}
void RTPCenter.PanelOffSwitch.Off (void) {nqw(0x000c,0xffff,20);}
void RTPCenter.FreqTransferSwitch.On (void) {nqw(0x000c,0x0007,20);}
void RTPCenter.VHFL.On (void) {nqw(0x000c,0x0001,20);}
void RTPCenter.VHFC.On (void) {nqw(0x000c,0x0002,20);}
void RTPCenter.VHFR.On (void) {nqw(0x000c,0x0003,20);}
void RTPCenter.AM.On (void) {nqw(0x000c,0x0005,20);}
void RTPCenter.HFL.On (void) {nqw(0x000c,0x0004,20);}
void RTPCenter.HFR.On (void) {nqw(0x000c,0x0006,20);}

//************************************
// RTPRight buttons
void RTPRight.FreqSelector.On (void) { 
	if (InnerFreqSelectorRight) { 
		InnerFreqSelectorRight=false;
	}
	else {
		InnerFreqSelectorRight=true;
	}
}

void RTPRight.PanelOffSwitch.On (void) {nqw(0x000d,0x0000,20);}
void RTPRight.PanelOffSwitch.Off (void) {nqw(0x000d,0xffff,20);}
void RTPRight.FreqTransferSwitch.On (void) {nqw(0x000d,0x0007,20);}
void RTPRight.VHFL.On (void) {nqw(0x000d,0x0001,20);}
void RTPRight.VHFC.On (void) {nqw(0x000d,0x0002,20);}
void RTPRight.VHFR.On (void) {nqw(0x000d,0x0003,20);}
void RTPRight.AM.On (void) {nqw(0x000d,0x0005,20);}
void RTPRight.HFL.On (void) {nqw(0x000d,0x0004,20);}
void RTPRight.HFR.On (void) {nqw(0x000d,0x0006,20);}


//*********************************************
// Define EHRFMC buttons

void EHRFMC.EIUSelL.On (void) {nqw(0x0014,0x0000,20);}
void EHRFMC.EIUSelAuto.On (void) {nqw(0x0014,0x0001,20);}
void EHRFMC.EIUSelC.On (void) {nqw(0x0014,0x0002,20);}
void EHRFMC.EIUSelR.On (void) {nqw(0x0014,0x0003,20);}
void EHRFMC.FMCL.On (void) {nqw(0x0015,0x0000,20);}
void EHRFMC.FMCR.On (void) {nqw(0x0015,0x0001,20);}
void EHRFMC.EventRCD.On (void) {nqw(0x0016,0x0001,20);}
void EHRFMC.EventRCD.Off (void) {nqw(0x0016,0x0000,20);}
void EHRFMC.HdgTrue.On (void) {nqw(0x0017,0x0001,20);}
void EHRFMC.HdgTrue.Off (void) {nqw(0x0017,0x0000,20);}

//*********************************************
// Define CaptCRTSelector buttons

void CaptCRTSelector.InbdCRTEicas.On (void) {nqw(0x001a,0x0000,20);}
void CaptCRTSelector.InbdCRTNorm.On (void) {nqw(0x001a,0x0001,20);}
void CaptCRTSelector.InbdCRTPfd.On (void) {nqw(0x001a,0x0002,20);}
void CaptCRTSelector.LwrCRTEicasPri.On (void) {nqw(0x001b,0x0000,20);}
void CaptCRTSelector.LwrCRTNorm.On (void) {nqw(0x001b,0x0001,20);}
void CaptCRTSelector.LwrCRTNd.On (void) {nqw(0x001b,0x0002,20);}
