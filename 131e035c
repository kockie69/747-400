  $L+ 426 
 defmod ( 0 , 0 , 0 , 7 ) 
 defmod ( 1 , 1 , 0 , 8 ) 
 defmod ( 7 , 0 , 0 , 4 ) 
 
 
 connector ( Mod0 ) 
 { 
 analog ( 0 ) ; 
 analog ( 1 ) ; 
 analog ( 2 ) ; 
 analog ( 3 ) ; 
 analog ( 4 ) ; 
 analog ( 5 ) ; 
 analog ( 6 ) ; 
 analog ( 7 ) ; 
 analog ( 8 ) ; 
 analog ( 9 ) ; 
 analog ( 10 ) ; 
 analog ( 11 ) ; 
 analog ( 12 ) ; 
 analog ( 13 ) ; 
 analog ( 14 ) ; 
 analog ( 15 ) ; 
 
 modrow ( 0 , 0 ) ; 
 modrow ( 0 , 1 ) ; 
 modrow ( 0 , 2 ) ; 
 modrow ( 0 , 3 ) ; 
 modrow ( 0 , 4 ) ; 
 modrow ( 0 , 5 ) ; 
 modrow ( 0 , 6 ) ; 
 } ; 
 
 connector ( Mod1 ) 
 { 
 analog ( 0 ) ; 
 analog ( 1 ) ; 
 analog ( 2 ) ; 
 analog ( 3 ) ; 
 analog ( 4 ) ; 
 analog ( 5 ) ; 
 analog ( 6 ) ; 
 analog ( 7 ) ; 
 analog ( 8 ) ; 
 analog ( 9 ) ; 
 analog ( 10 ) ; 
 analog ( 11 ) ; 
 analog ( 12 ) ; 
 analog ( 13 ) ; 
 analog ( 14 ) ; 
 analog ( 15 ) ; 
 modrow ( 1 , 0 ) ; 
 modrow ( 1 , 1 ) ; 
 modrow ( 1 , 2 ) ; 
 modrow ( 1 , 3 ) ; 
 modrow ( 1 , 4 ) ; 
 modrow ( 1 , 5 ) ; 
 modrow ( 1 , 6 ) ; 
 modrow ( 1 , 7 ) ; 
 } ; 
 
 connector ( Pedestal ) 
 { 
 modrow ( 1 , 0 ) ; 
 modrow ( 1 , 1 ) ; 
 modrow ( 1 , 2 ) ; 
 modrow ( 1 , 3 ) ; 
 modrow ( 1 , 4 ) ; 
 modrow ( 1 , 5 ) ; 
 modrow ( 1 , 6 ) ; 
 modrow ( 1 , 7 ) ; 
 
 modrow ( 7 , 0 ) ; 
 modrow ( 7 , 1 ) ; 
 } ; 
 
 
 device ( AutoBrakes ) 
 { 
 connector ( Pedestal ) ; 
 button ( 0 , 0 , RTO ) ; 
 button ( 0 , 1 , OFF ) ; 
 button ( 0 , 2 , DISARM ) ; 
 button ( 0 , 3 , _1 ) ; 
 button ( 0 , 4 , _2 ) ; 
 button ( 0 , 5 , _3 ) ; 
 button ( 0 , 6 , _4 ) ; 
 button ( 0 , 7 , MAXAUTO ) ; 
 } ; 
 
 
 device ( ThrottleQuadrant ) 
 { 
 connector ( Pedestal ) ; 
 button ( 1 , 0 , ParkingBrakePull ) ; 
 } ; 
 
 
 device ( Gear ) 
 { 
 connector ( Mod1 ) ; 
 button ( 1 , 1 , AltnFlapsRet ) ; 
 button ( 1 , 2 , AltnFlapsOff ) ; 
 button ( 1 , 3 , AltnFlapsExt ) ; 
 button ( 1 , 4 , AltnFlapsArm ) ; 
 button ( 1 , 5 , GearDown ) ; 
 button ( 1 , 6 , GearOff ) ; 
 button ( 1 , 7 , GearUp ) ; 
 button ( 2 , 0 , GearLockOvrd ) ; 
 button ( 2 , 1 , AltnGearNoseBody ) ; 
 button ( 7 , 7 , AltnGearWings ) ; 
 
 output ( leds0 , 0 , 0 ) 
 { 
 led_ARM =  0x01 ; 
 led_NOSE =  0x02 ; 
 led_WING =  0x04 ; 
 } ; 
 } ; 
 
 device ( RTPLeft ) 
 { 
 connector ( Pedestal ) ; 
 button ( 3 , 1 , FreqSelector ) ; 
 button ( 3 , 0 , PanelOffSwitch ) ; 
 button ( 2 , 2 , FreqTransferSwitch ) ; 
 button ( 3 , 2 , VHFL ) ; 
 button ( 2 , 7 , VHFC ) ; 
 button ( 2 , 4 , VHFR ) ; 
 button ( 2 , 3 , AM ) ; 
 button ( 2 , 5 , HFL ) ; 
 button ( 2 , 6 , HFR ) ; 
 
 
 button ( 0 , 0 , r_cnt_FreqSelector ) ; 
 button ( 0 , 1 , r_dir_FreqSelector ) ; 
 
 
 button ( 0 , 2 , r_cnt_HFSens ) ; 
 button ( 0 , 3 , r_dir_HFSens ) ; 
 } ; 
 
 device ( RTPCenter ) 
 { 
 connector ( Pedestal ) ; 
 button ( 7 , 7 , FreqSelector ) ; 
 button ( 7 , 7 , PanelOffSwitch ) ; 
 button ( 7 , 7 , FreqTransferSwitch ) ; 
 button ( 7 , 7 , VHFL ) ; 
 button ( 7 , 7 , VHFC ) ; 
 button ( 7 , 7 , VHFR ) ; 
 button ( 7 , 7 , AM ) ; 
 button ( 7 , 7 , HFL ) ; 
 button ( 7 , 7 , HFR ) ; 
 
 
 button ( 0 , 0 , r_cnt_FreqSelector ) ; 
 button ( 0 , 1 , r_dir_FreqSelector ) ; 
 
 
 button ( 0 , 2 , r_cnt_HFSens ) ; 
 button ( 0 , 3 , r_dir_HFSens ) ; 
 } ; 
 
 device ( RTPRight ) 
 { 
 connector ( Pedestal ) ; 
   button ( 7 , 7 , FreqSelector ) ; 
 button ( 7 , 7 , PanelOffSwitch ) ; 
 button ( 7 , 7 , FreqTransferSwitch ) ; 
 button ( 7 , 7 , VHFL ) ; 
 button ( 7 , 7 , VHFC ) ; 
 button ( 7 , 7 , VHFR ) ; 
 button ( 7 , 7 , AM ) ; 
 button ( 7 , 7 , HFL ) ; 
 button ( 7 , 7 , HFR ) ; 
 
 
 button ( 0 , 0 , r_cnt_FreqSelector ) ; 
 button ( 0 , 1 , r_dir_FreqSelector ) ; 
 
 
 button ( 0 , 2 , r_cnt_HFSens ) ; 
 button ( 0 , 3 , r_dir_HFSens ) ; 
 } ; 
 
 device ( DisplayLeftVHF ) 
 { 
 display ( standby , 2 , 0 , "999.00" , true ) ; 
 display ( standbyFrac , 2 , 0 , "00" , true ) ; 
 display ( active , 2 , 8 , "999.00" , true ) ; 
 display ( activeFrac , 2 , 8 , "00" , true ) ; 
 } ; 
 
 device ( DisplayLeftHF ) 
 { 
 display ( standby , 2 , 0 , "99.000" , true ) ; 
 display ( standbyFrac , 2 , 0 , "000" , true ) ; 
 display ( active , 2 , 8 , "99.000" , true ) ; 
 display ( activeFrac , 2 , 8 , "000" , true ) ; 
 } ; 
 
 device ( DisplayLeftSen ) 
 { 
 display ( standbySenNr , 2 , 4 , "9" , true ) ; 
 display ( standbySen , 2 , 0 , "9999" , true ) ; 
 display ( active , 2 , 8 , "99.000" , true ) ; 
 display ( activeFrac , 2 , 8 , "000" , true ) ; 
 } ; 
 
 device ( DisplayLeftOff ) 
 { 
 display ( standby , 2 , 0 , "99999" , true ) ; 
 display ( active , 2 , 8 , "99999" , true ) ; 
 } ; 
 
 device ( DisplayCenterVHF ) 
 { 
 display ( standby , 2 , 0 , "999.00" , true ) ; 
 display ( standbyFrac , 2 , 0 , "00" , true ) ; 
 display ( active , 2 , 8 , "999.00" , true ) ; 
 display ( activeFrac , 2 , 8 , "00" , true ) ; 
 } ; 
 
 device ( DisplayCenterHF ) 
 { 
 display ( standby , 2 , 0 , "99.000" , true ) ; 
 display ( standbyFrac , 2 , 0 , "000" , true ) ; 
 display ( active , 2 , 8 , "99.000" , true ) ; 
 display ( activeFrac , 2 , 8 , "000" , true ) ; 
 } ; 
 
 device ( DisplayCenterSen ) 
 { 
 display ( standbySenNr , 2 , 4 , "9" , true ) ; 
 display ( standbySen , 2 , 0 , "9999" , true ) ; 
 display ( active , 2 , 8 , "99.000" , true ) ; 
 display ( activeFrac , 2 , 8 , "000" , true ) ; 
 } ; 
 
 device ( DisplayCenterOff ) 
 { 
 display ( standby , 2 , 0 , "99999" , true ) ; 
 display ( active , 2 , 8 , "99999" , true ) ; 
 } ; 
 
 device ( DisplayRightVHF ) 
 { 
 display ( standby , 2 , 0 , "999.00" , true ) ; 
 display ( standbyFrac , 2 , 0 , "00" , true ) ; 
 display ( active , 2 , 8 , "999.00" , true ) ; 
 display ( activeFrac , 2 , 8 , "00" , true ) ; 
 } ; 
 
 device ( DisplayRightHF ) 
 { 
 display ( standby , 2 , 0 , "99.000" , true ) ; 
 display ( standbyFrac , 2 , 0 , "000" , true ) ; 
 display ( active , 2 , 8 , "99.000" , true ) ; 
 display ( activeFrac , 2 , 8 , "000" , true ) ; 
 } ; 
 
 device ( DisplayRightSen ) 
 { 
 display ( standbySenNr , 2 , 4 , "9" , true ) ; 
 display ( standbySen , 2 , 0 , "9999" , true ) ; 
 display ( active , 2 , 8 , "99.000" , true ) ; 
 display ( activeFrac , 2 , 8 , "000" , true ) ; 
 } ; 
 
 device ( DisplayRightOff ) 
 { 
 display ( standby , 2 , 0 , "99999" , true ) ; 
 display ( active , 2 , 8 , "99999" , true ) ; 
 } ; $L+ 21 
 flag QPflag =  false ; 
 flag inLoopFlag =  false ; 
 flag RightMostFreqSelectorLeft =  false ; 
 flag RightMostFreqSelectorCenter =  false ; 
 flag RightMostFreqSelectorRight =  false ; 
 flag f_FreqSelectorTiming =  false ; 
 flag f_HFSensTiming =  false ; 
 
 byte testData ; 
 byte loopCount ; 
 byte byt_Tick =  0 ; 
 byte byt_FreqSelectorTime =  0 ; 
 byte byt_HFSensTime =  0 ; 
 
 word testWord ; 
 word testCount =  0 ; 
 word frac ; 
 word preFrac ; 
 word AltnFlapsArmWord ; 
 word AltnGearNoseBodyWord ; 
 word AltnGearWingsWord ; 
 word testrvarWord ; 
 word eventCount ; 
 word temp ; 
 word wrd_HFSens ; 
 word wrd_FreqSelector ; 
 
 rvar ( testrvar , 0 , 0xFF , 0 , true ) ; $L+ 11 
 void RadioPanelLeftOff ( void ) ; $L+ 10 
 defineqproc ( 1 , RadioPanelLeftOff ) 
 
 void RadioPanelLeftOff ( ) 
 { 
 
 DisplayLeftOff.standby =  blank ; 
 DisplayLeftOff.active =  blank ; 
 } 
 
 
 
 void CheckSpeedTimers ( void ) 
 { 
 if ( f_FreqSelectorTiming ) 
 { 
 byt_FreqSelectorTime -- ; 
   if ( !  byt_FreqSelectorTime ) 
 { 
 f_FreqSelectorTiming =  false ; 
 
 } 
 } 
 
 if ( f_HFSensTiming ) 
 { 
 byt_HFSensTime -- ; 
 if ( !  byt_HFSensTime ) 
 { 
 f_HFSensTiming =  false ; 
 
 } 
 } 
 } 
 
 
 void handle_HFSens_rot ( void ) 
 { 
 if ( RTPLeft.r_dir_HFSens ) 
 { 
 if ( f_HFSensTiming ) 
 { 
 wrd_HFSens -= 8 ; 
 } 
 else 
 { 
 wrd_HFSens -= 1 ; 
 } 
 } 
 else 
 { 
 if ( f_HFSensTiming ) 
 { 
 wrd_HFSens += 8 ; 
 } 
 else 
 { 
 wrd_HFSens += 1 ; 
 } 
 } 
 byt_HFSensTime =  5 ; 
 f_HFSensTiming =  true ; 
 } 
 
 void RTPLeft.r_cnt_HFSens.On ( void ) { 
 jump ( handle_HFSens_rot ) ; 
 } 
 
 void RTPLeft.r_cnt_HFSens.Off ( void ) { 
 jump ( handle_HFSens_rot ) ; 
 } 
 
 void handle_FreqSelector_rot ( void ) $L+ 8 
 { 
 if ( RightMostFreqSelectorLeft ) 
 
 { 
 if ( RTPLeft.r_dir_FreqSelector ) 
 
 { 
 if ( f_FreqSelectorTiming ) 
 { 
 
 nqw ( 0x000d , 0x10f0 , 20 ) ; 
 } 
 else 
 { 
 
 nqw ( 0x000d , 0x00f0 , 20 ) ; 
 } 
 } 
 else 
 { 
 
 if ( f_FreqSelectorTiming ) 
 { 
 
 nqw ( 0x000d , 0x1010 , 20 ) ; 
 } 
 else 
 { 
 
 nqw ( 0x000d , 0x0010 , 20 ) ; 
 } 
 } 
 } 
 else 
 
 { 
 if ( RTPLeft.r_dir_FreqSelector ) 
 
 { 
 if ( f_FreqSelectorTiming ) 
 { 
 
 nqw ( 0x000d , 0x100f , 20 ) ; 
 } 
 else 
 { 
 
 nqw ( 0x000d , 0x000f , 20 ) ; 
 } 
 } 
 else 
 
 { 
 if ( f_FreqSelectorTiming ) 
 { 
 
 nqw ( 0x000d , 0x1001 , 20 ) ; 
 } 
 else 
 { 
 
 nqw ( 0x000d , 0x0001 , 20 ) ; 
 } 
 } 
 } 
 byt_FreqSelectorTime =  5 ; 
 f_FreqSelectorTiming =  true ; 
 } 
 
 void RTPLeft.r_cnt_FreqSelector.On ( void ) { 
 jump ( handle_FreqSelector_rot ) ; 
 } 
 
 void RTPLeft.r_cnt_FreqSelector.Off ( void ) { 
 jump ( handle_FreqSelector_rot ) ; 
 } $L+ 5 
 void MainLoop ( void ) 
 { 
 call ( CheckSpeedTimers ) ; 
 byt_Tick ++ ; 
 if ( byt_Tick >  49 ) 
 { 
 byt_Tick =  0 ; 
 } 
 delay ( 1 ) ; 
 jump ( MainLoop ) ; 
 } 
 
 
 
 void INIT ( void ) 
 { 
 
 senddata ( 7 , 0 , 0b10101010 ) ; 
 senddata ( 7 , 1 , 0b10101010 ) ; 
 
 eventCount =  0 ; 
 setqlogon ( 0x11 ) ; 
 exec ( 139 ) ; 
 jump ( MainLoop ) ; 
 
 
 } 
 
 
 
 ph AltnFlapsArm ( 1 ) 
 { 
 word W1 ; 
 word W0 ; 
 AltnFlapsArmWord =  AltnFlapsArm.W0 ; 
 
 if ( AltnFlapsArmWord && 0x0001 ) { 
 Gear.leds0.led_ARM =  on ; 
 } 
 else { 
 Gear.leds0.led_ARM =  off ; 
 } 
 } ; 
 
 
 ph AltnGearNoseBody ( 2 ) 
 { 
 word W1 ; 
 word W0 ; 
 AltnGearNoseBodyWord =  AltnGearNoseBody.W0 ; 
 
 if ( AltnGearNoseBodyWord && 0x0001 ) { 
 Gear.leds0.led_NOSE =  on ; 
 } 
 else { 
 Gear.leds0.led_NOSE =  off ; 
 } 
 } ; 
 
 
 ph AltnGearWings ( 3 ) 
 { 
 word W1 ; 
 word W0 ; 
 AltnGearWingsWord =  AltnGearWings.W0 ; 
 
 if ( AltnGearWingsWord && 0x0001 ) { 
 Gear.leds0.led_WING =  on ; 
 } 
 else { 
 Gear.leds0.led_WING =  off ; 
 } 
 } ; 
 
 
 ph RadioPanelLeftHF ( 4 ) 
 { 
 word W1 ; 
 word W0 ; 
 preFrac =  RadioPanelLeftHF.W0 /  1000 ; 
 frac =  RadioPanelLeftHF.W0 % 1000 ; 
 DisplayLeftHF.active =  preFrac ; 
 DisplayLeftHF.activeFrac =  frac ; 
 preFrac =  RadioPanelLeftHF.W1 /  1000 ; 
 frac =  RadioPanelLeftHF.W1 % 1000 ; 
 DisplayLeftHF.standby =  preFrac ; 
 DisplayLeftHF.standbyFrac =  frac ; 
 
 } ; 
 
 
 ph RadioPanelLeftVHF ( 5 ) 
 { 
 word W1 ; 
 word W0 ; 
 preFrac =  RadioPanelLeftVHF.W0 /  100 ; 
 frac =  RadioPanelLeftVHF.W0 % 100 ; 
 DisplayLeftVHF.active =  preFrac ; 
 DisplayLeftVHF.activeFrac =  frac ; 
 preFrac =  RadioPanelLeftVHF.W1 /  100 ; 
 frac =  RadioPanelLeftVHF.W1 % 100 ; 
 DisplayLeftVHF.standby =  preFrac ; 
 DisplayLeftVHF.standbyFrac =  frac ; 
 
 } ; 
 
 
 ph RadioPanelLeftSen ( 6 ) 
 { 
 word W1 ; 
 word W0 ; 
 preFrac =  RadioPanelLeftSen.W0 /  1000 ; 
 frac =  RadioPanelLeftSen.W0 % 1000 ; 
 DisplayLeftSen.active =  preFrac ; 
 DisplayLeftSen.activeFrac =  frac ; 
 
 frac =  5 ; 
 preFrac =  RadioPanelLeftSen.W1 ; 
 DisplayLeftSen.standbySen =  preFrac ; 
 DisplayLeftSen.standbySenNr =  frac ; 
 } ; $L+ 6 
 void AutoBrakes.RTO.On ( void ) { nqw ( 0x0000 , 0x0000 , 20 ) ; } 
 void AutoBrakes.OFF.On ( void ) { nqw ( 0x0000 , 0x0001 , 20 ) ; } 
 void AutoBrakes.DISARM.On ( void ) { nqw ( 0x0000 , 0x0002 , 20 ) ; } 
   void AutoBrakes._1.On ( void ) { nqw ( 0x0000 , 0x0003 , 20 ) ; } 
 void AutoBrakes._2.On ( void ) { nqw ( 0x0000 , 0x0004 , 20 ) ; } 
 void AutoBrakes._3.On ( void ) { nqw ( 0x0000 , 0x0005 , 20 ) ; } 
 void AutoBrakes._4.On ( void ) { nqw ( 0x0000 , 0x0006 , 20 ) ; } 
 void AutoBrakes.MAXAUTO.On ( void ) { nqw ( 0x0000 , 0x0007 , 20 ) ; } $L+ 4 
 void ThrottleQuadrant.ParkingBrakePull.On ( void ) { nqw ( 0x0004 , 0x0001 , 20 ) ; } 
 void ThrottleQuadrant.ParkingBrakePull.Off ( void ) { nqw ( 0x0004 , 0x0000 , 20 ) ; } $L+ 4 
 void Gear.AltnFlapsRet.On ( void ) { nqw ( 0x0005 , 0x0000 , 20 ) ; } 
 void Gear.AltnFlapsOff.On ( void ) { nqw ( 0x0005 , 0x0001 , 20 ) ; } 
 void Gear.AltnFlapsExt.On ( void ) { nqw ( 0x0005 , 0x0002 , 20 ) ; } 
 void Gear.AltnFlapsArm.On ( void ) { AltnFlapsArmWord =  AltnFlapsArmWord ^  0x0001 ; nqw ( 0x000A , AltnFlapsArmWord , 20 ) ; } 
 void Gear.AltnFlapsArm.Off ( void ) { AltnFlapsArmWord =  AltnFlapsArmWord ^  0x0001 ; nqw ( 0x000A , AltnFlapsArmWord , 20 ) ; } 
 void Gear.GearDown.On ( void ) { nqw ( 0x0006 , 0x0001 , 20 ) ; } 
 void Gear.GearDown.Off ( void ) { nqw ( 0x0006 , 0x0002 , 20 ) ; } 
 
 void Gear.GearUp.On ( void ) { nqw ( 0x0006 , 0x0003 , 20 ) ; } 
 void Gear.GearUp.Off ( void ) { nqw ( 0x0006 , 0x0002 , 20 ) ; } 
 void Gear.GearLockOvrd.On ( void ) { nqw ( 0x0007 , 0x0001 , 20 ) ; } 
 void Gear.GearLockOvrd.Off ( void ) { nqw ( 0x0007 , 0x0000 , 20 ) ; } 
 void Gear.AltnGearNoseBody.On ( void ) { AltnGearNoseBodyWord =  AltnGearNoseBodyWord ^  0x0001 ; nqw ( 0x0008 , 0x0000 , 20 ) ; } 
 void Gear.AltnGearNoseBody.Off ( void ) { AltnGearNoseBodyWord =  AltnGearNoseBodyWord ^  0x0001 ; nqw ( 0x0008 , 0x0000 , 20 ) ; } 
 void Gear.AltnGearWings.On ( void ) { AltnGearWingsWord =  AltnGearWingsWord ^  0x0001 ; nqw ( 0x0009 , 0x0000 , 20 ) ; } 
 void Gear.AltnGearWings.Off ( void ) { AltnGearWingsWord =  AltnGearWingsWord ^  0x0001 ; nqw ( 0x0009 , 0x0000 , 20 ) ; } 
 
 
 
 void RTPLeft.FreqSelector.On ( void ) { 
 if ( RightMostFreqSelectorLeft ) { 
 RightMostFreqSelectorLeft =  false ; 
 } 
 else { 
 RightMostFreqSelectorLeft =  true ; 
 } 
 } 
 
 void RTPLeft.PanelOffSwitch.On ( void ) { nqw ( 0x000b , 0x0000 , 20 ) ; } 
 void RTPLeft.PanelOffSwitch.Off ( void ) { nqw ( 0x000b , 0xffff , 20 ) ; } 
 void RTPLeft.FreqTransferSwitch.On ( void ) { nqw ( 0x000b , 0x0007 , 20 ) ; } 
 void RTPLeft.VHFL.On ( void ) { nqw ( 0x000b , 0x0001 , 20 ) ; } 
 void RTPLeft.VHFC.On ( void ) { nqw ( 0x000b , 0x0002 , 20 ) ; } 
 void RTPLeft.VHFR.On ( void ) { nqw ( 0x000b , 0x0003 , 20 ) ; } 
 void RTPLeft.AM.On ( void ) { nqw ( 0x000b , 0x0005 , 20 ) ; } 
 void RTPLeft.HFL.On ( void ) { nqw ( 0x000b , 0x0004 , 20 ) ; } 
 void RTPLeft.HFR.On ( void ) { nqw ( 0x000b , 0x0006 , 20 ) ; } 
 
 
 
 void RTPCenter.FreqSelector.On ( void ) { 
 if ( RightMostFreqSelectorCenter ) { 
 RightMostFreqSelectorCenter =  false ; 
 } 
 else { 
 RightMostFreqSelectorCenter =  true ; 
 } 
 } 
 
 void RTPCenter.PanelOffSwitch.On ( void ) { nqw ( 0x000c , 0x0000 , 20 ) ; } 
 void RTPCenter.PanelOffSwitch.Off ( void ) { nqw ( 0x000c , 0xffff , 20 ) ; } 
 void RTPCenter.FreqTransferSwitch.On ( void ) { nqw ( 0x000c , 0x0007 , 20 ) ; } 
 void RTPCenter.VHFL.On ( void ) { nqw ( 0x000c , 0x0001 , 20 ) ; } 
 void RTPCenter.VHFC.On ( void ) { nqw ( 0x000c , 0x0002 , 20 ) ; } 
 void RTPCenter.VHFR.On ( void ) { nqw ( 0x000c , 0x0003 , 20 ) ; } 
 void RTPCenter.AM.On ( void ) { nqw ( 0x000c , 0x0005 , 20 ) ; } 
 void RTPCenter.HFL.On ( void ) { nqw ( 0x000c , 0x0004 , 20 ) ; } 
 void RTPCenter.HFR.On ( void ) { nqw ( 0x000c , 0x0006 , 20 ) ; } 
 
 
 
 void RTPRight.FreqSelector.On ( void ) { 
 if ( RightMostFreqSelectorRight ) { 
 RightMostFreqSelectorRight =  false ; 
 } 
 else { 
 RightMostFreqSelectorRight =  true ; 
 } 
 } 
 
 void RTPRight.PanelOffSwitch.On ( void ) { nqw ( 0x000d , 0x0000 , 20 ) ; } 
 void RTPRight.PanelOffSwitch.Off ( void ) { nqw ( 0x000d , 0xffff , 20 ) ; } 
 void RTPRight.FreqTransferSwitch.On ( void ) { nqw ( 0x000d , 0x0007 , 20 ) ; } 
 void RTPRight.VHFL.On ( void ) { nqw ( 0x000d , 0x0001 , 20 ) ; } 
   void RTPRight.VHFC.On ( void ) { nqw ( 0x000d , 0x0002 , 20 ) ; } 
 void RTPRight.VHFR.On ( void ) { nqw ( 0x000d , 0x0003 , 20 ) ; } 
 void RTPRight.AM.On ( void ) { nqw ( 0x000d , 0x0005 , 20 ) ; } 
 void RTPRight.HFL.On ( void ) { nqw ( 0x000d , 0x0004 , 20 ) ; } 
  void RTPRight.HFR.On ( void ) { nqw ( 0x000d , 0x0006 , 20 ) ; } 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                